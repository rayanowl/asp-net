
@{

}

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="~/Content/new.css">
    <link rel="stylesheet" href="~/Content/prism.css">
    <link rel="icon" type="image/x-icon" href="~/Content/images/developer.jpg">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
          integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
          crossorigin="anonymous"
          referrerpolicy="no-referrer" />


</head>
<body>

    <header class="header">
        <nav class="navbar">
            <a href="@Url.Action("Index", "Default")" class="@(ViewBag.Title=="Suay Akbudak"?"active":"")"> / home</a>
            <a href="@Url.Action("About", "Default")" class="@(ViewBag.Title=="About"?"active":"")"> / about</a>
            <a href="@Url.Action("Experience", "Default")" class="@(ViewBag.Title=="Experience"?"active":"")"> / experience</a>
            <a href="@Url.Action("Projects", "Default")" class="@(ViewBag.Title=="Projects"?"active":"")"> / projects</a>
            <a href="@Url.Action("Other" , "Default")" class="@(ViewBag.Title=="Other"?"active":"")"> / other</a>
        </nav>
    </header>

    @RenderBody()



    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
    <script src="https://unpkg.com/typed.js@2.0.132/dist/typed.umd.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.min.js" integrity="sha512-3dZ9wIrMMij8rOH7X3kLfXAzwtcHpuYpEgQg1OA4QAob1e81H8ntUQmQm3pBudqIoySO5j0tHN4ENzA6+n2r4w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="~/Content/blogs.js"></script>
    <script src="~/Content/app.js"></script>
    <script src="~/Content/script.js"></script>
    <script src="~/Content/star.js"></script>
    <script src="~/Content/active.js"></script>
    <script src="~/Content/nn.js"></script>
    <!--<script>
        $( 'header nav a' ).on( 'click', function () {
        $( 'header nav' ).find( '.acti' ).removeClass( 'acti' );
        $( this ).parent( 'a' ).addClass( 'acti' );
    });
     </script>-->
    <script src="~/Content/prism.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/processing.js/1.6.6/processing.min.js"></script>

    <script type="application/processing" data-processing-target="pjs">
                void setup()
        {
        size(400, 400);
        background(#1d1f20);
        }
        int r = 100;
        int ballX = 0;
        int dir = 1;
        void draw()
        {
        background(#1d1f20);
        translate(20, 0);
        drawCurve();
        strokeWeight(50);
        point(ballX, 200 + dir * r * sin(radians(ballX)));
        strokeWeight(1);
        //line(width/2, 0, ballX, 200 + r * sin(radians(ballX)));
        ballX += dir*3;
        if(ballX > 360 || ballX < 0)
        {
        dir *= -1;
        }
        }

        void drawCurve()
        {
        stroke(0);
        line(0, 200, 360, 200);
        stroke(255, 0, 0);
        for(int x = 0; x < 360; x++)
        {
        point(x, 200 + r * sin(radians(x)));
        point(x, 200 - r * sin(radians(x)));
        }
        }
    </script>
    <script type="application/processing" data-processing-target="pjs1">
        // Petal.
        // Registers when drawing is at the center and changes color then

        //The constants needed in the equations for the “rose”
        final float K = 4; //The factor that controls the number of “petals”
        final float RATE = 0.02; //The change in t each frame. Controls speed and smoothness.
        final float ROSE_RADIUS = 200; //The radius, in pixels, of the “rose”

        //The “state” variables that remember what’s happening
        float t = 0; //The “parameter” t which will slowly change from 0 to 2PI
        float prevX; //What were x…
        float prevY; //…and y last time?

        boolean changeColor = true;//the line is moving toward the center, otherwise it’s moving away from center
        boolean allowed = true;

        void setup() {
        size(500, 500); //Usual window size
        background(#1d1f20); //Use a black background, and…
        strokeWeight(2); //nice thick lines

        //Precalculate the first point (with t=0). This must be done
        //after the size command because width and height are needed.
        prevX=width/2+ROSE_RADIUS;
        prevY=height/2;
        }

        void draw() {
        //Calculate the new point
        float x = cos(K*t)*cos(t)*ROSE_RADIUS+width/2;
        float y = cos(K*t)*sin(t)*ROSE_RADIUS+height/2;

        // When we are at the center we set a marker
        //if (x == width/2 && y == height/2) {
        if (allowed && dist(x, y, width/2, height/2)<8.92) {
           changeColor=true;
           allowed=false;
           }
           if (changeColor) {
           if (random(1)>
        0.9)
        stroke(random(222, 255), random(0, 25), random(0, 5));
        else
        stroke(random(100, 255), random(90, 255), random(100, 255));
        changeColor = false;
        }

        if (dist(x, y, width/2, height/2)>144.92) {
        allowed = true;
        }

        //draw the next line
        line(prevX, prevY, x, y);

        //Keep all the information needed for next time
        prevX = x;
        prevY = y;

        //Advance t
        t += RATE;

        }//draw
    </script>
    <script type="application/processing" data-processing-target="pjs2">
               int radius = 200;

        void setup() {
        background(#1d1f20);
          size(500, 500);
          frameRate(1000);
          strokeWeight(3);
          smooth();
        }

        void draw() {
          translate(width/2, height/2);
          float q = random(1) * (TWO_PI);
          float r = sqrt(random(1));
          float x = (radius * r) * cos(q);
          float y = (radius * r) * sin(q);
          point(x, y);
        }
    </script>
    <script type="application/processing" data-processing-target="pjs3">
                        void setup()
                {
                  size(500, 500);
                  for(int i = 0; i < flakes.length; i++)
                  {
                    flakes[i] = new SnowFlake();
                  }
                }

                SnowFlake[] flakes = new SnowFlake[50];

                void draw()
                {
                  background(#1d1f20);
                  //translate(width/2, height/2);

                  for(int i = 0; i < flakes.length; i++)
                  {
                    flakes[i].drawFlake();
                  }
                }

                class SnowFlake
        {
          float speed, r, g, b, alpha, size, x, y;

          public SnowFlake()
          {
            initializeRandoms();
          }

          void initializeRandoms()
          {
            speed = random(1, 8);
            alpha = random(20, 100);
            size = random(3, 10);
            x = random(-20, width + 20);
            y = random(-100, -20);
            r = random(256);
            g = random(256);
            b = random(256);
          }

          void drawFlake()
          {
            stroke(r, g, b, alpha);
            pushMatrix();
            translate(x, y);
            scale(size); //(10, 10)

            for (int i= 0; i < 6; i++)
            {
              pushMatrix();
              rotate(radians(i * 60));
              drawVertices();
              scale(1, -1); //flip
              drawVertices();
              popMatrix();
            }
            popMatrix();
            y += speed;
            if(y > height + 100)
              initializeRandoms();
          }

          void drawVertices()
          {
            beginShape();

            vertex(0, 0.2);
            vertex(2, 0.2);
            vertex(3, 1.7);
            vertex(3.5, 1.7);
            vertex(2.5, 0.2);

            vertex(4.0, 0.2);

            vertex(4.8, 1.2);
            vertex(5.3, 1.2);
            vertex(4.3, 0.2);

            vertex(6.0, 0.2);
            vertex(6.0, 0);

            endShape(CLOSE);
          }
        }
    </script>
    <script type="application/processing" data-processing-target="pjs4">
        int getRandomColor() {

          return color(random(120,255), random(255), random(255));
        }


        void drawFlower(float x, float y, float flowerSize){

        for(int i = 0 ; i< 7; i++)

          strokeWeight(flowerSize);
          stroke(getRandomColor());

          translate(x,y);
          for(int i=0; i<7;i++){

            rotate(TWO_PI/7);
            line(0,0,5*flowerSize,0);

          }

          strokeWeight(0);
          fill(getRandomColor());
          ellipse(0,0,3.5 * flowerSize,3.5 * flowerSize);
        }

        void setup() {
        size(600,600);
        background(#1d1f20);

        }

        void draw(){

          if(keyPressed == true)
          drawFlower(random(width),random(height),random(5,10));



        }
    </script>
    <script type="application/processing" data-processing-target="pjs5">
                void setup() {
          size(500, 500);
          noStroke();

        }
        void draw() {
           float rg = map(abs((millis()%10000)-5000), 0, 5000, 0, 255);
          background(rg, rg, 0);
          pushMatrix();
          translate(width/2, height/2);
          rotate(-PI);
          rotate(map(millis()%10000, 0, 10000, 0, TWO_PI));
          // The Sun
          fill(255, 255-rg, 255-rg);
          ellipse(0, 200, 50, 50);
          popMatrix();

          fill(23, 122, 11);
          ellipse(80, 220, 100, 100);
          ellipse(265, 250, 230, 200);
          ellipse(500, 310, 200, 300);

          fill(40, 180, 20);
          ellipse(0, 270, 230, 230);
          ellipse(150, 280, 230, 190);
          ellipse(260, 275, 120, 120);

          fill(30, 215, 7);
          ellipse(55, 370, 250, 250);
          ellipse(235, 380, 200, 175);
          ellipse(415, 320, 320, 300);

          fill(26, 255, 0);
          rect(0, 400, 500, 100);
        }
    </script>
    <script type="application/processing" data-processing-target="pjs6">
        void setup()
        {
        size(500, 500);
        stroke(255);
        }
        int angle = 0;



        void draw()
        {
        background(#1d1f20);
        strokeWeight(8);
        point(width/2, height/2);
        ellipse(250, 375, 5, 150);
        translate(width/2, height/2);
        rotate(radians(angle++));
        translate(-width/2, -height/2);
        drawLeaves();
        }

        void drawLeaves()
        {
        for(int i = 0 ; i< 6; i++)
        {
        translate(width/2, height/2);
        rotate(radians(60));
        translate(-width/2, -height/2);
        ellipse(325, 250, 100, 10);
        }
        }
    </script>

</body>
        </html>
